#!/usr/bin/env node

require('dotenv').config();
const bcrypt = require('bcryptjs');
const { pool } = require('../src/infrastructure/persistence/db');

async function testMedicoCreation() {
  console.log('üß™ Probando creaci√≥n de m√©dico con usuario...');

  try {
    // 1. Crear un hospital de prueba si no existe
    const [hospitales] = await pool.query('SELECT id FROM Hospital LIMIT 1');
    let hospitalId;

    if (hospitales.length === 0) {
      const [result] = await pool.query(
        `INSERT INTO Hospital (id, nombre, direccion, telefono, activo) 
         VALUES (UUID(), 'Hospital de Prueba', 'Calle Test 123', '555-0001', TRUE)`
      );
      hospitalId = result.insertId;
      console.log('‚úÖ Hospital de prueba creado');
    } else {
      hospitalId = hospitales[0].id;
      console.log('‚ÑπÔ∏è  Usando hospital existente');
    }

    // 2. Crear m√©dico con usuario
    const medicoData = {
      hospitalId: hospitalId,
      nombres: 'Dr. Mar√≠a',
      apellidos: 'Gonz√°lez',
      email: 'maria.gonzalez@test.com',
      password: 'medico123',
      activo: true
    };

    console.log('üìù Creando m√©dico:', medicoData.email);

    // Crear m√©dico
    const [medicoResult] = await pool.query(
      `INSERT INTO Medico (hospitalId, nombres, apellidos, email, activo)
       VALUES (?, ?, ?, ?, ?)`,
      [medicoData.hospitalId, medicoData.nombres, medicoData.apellidos, medicoData.email, medicoData.activo]
    );

    const medicoId = medicoResult.insertId;
    console.log('‚úÖ M√©dico creado con ID:', medicoId);

    // Crear usuario
    const passwordHash = await bcrypt.hash(medicoData.password, 10);
    
    await pool.query(
      `INSERT INTO Usuario (email, password, rol, medicoId, activo)
       VALUES (?, ?, 'MEDICO', ?, TRUE)`,
      [medicoData.email, passwordHash, medicoId]
    );

    console.log('‚úÖ Usuario m√©dico creado');

    // 3. Verificar que puede hacer login
    console.log('\nüîê Probando login del m√©dico...');
    
    const [usuario] = await pool.query(
      'SELECT * FROM Usuario WHERE email = ?',
      [medicoData.email]
    );

    if (usuario.length > 0) {
      const user = usuario[0];
      const passwordMatch = await bcrypt.compare(medicoData.password, user.password);
      
      if (passwordMatch) {
        console.log('‚úÖ Login exitoso!');
        console.log('üìã Credenciales del m√©dico:');
        console.log(`   Email: ${medicoData.email}`);
        console.log(`   Password: ${medicoData.password}`);
        console.log(`   Rol: ${user.rol}`);
        console.log(`   M√©dico ID: ${user.medicoId}`);
      } else {
        console.log('‚ùå Error en la verificaci√≥n de contrase√±a');
      }
    } else {
      console.log('‚ùå Usuario no encontrado');
    }

    console.log('\nüéâ Prueba completada exitosamente!');
    console.log('\nüìã Ahora puedes probar en Postman:');
    console.log('1. Login como admin');
    console.log('2. Crear m√©dico con POST /medicos');
    console.log('3. Login como m√©dico con las credenciales creadas');

  } catch (error) {
    console.error('‚ùå Error en la prueba:', error);
  } finally {
    await pool.end();
  }
}

testMedicoCreation();
